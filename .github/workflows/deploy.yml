# 워크플로우 이름
name: CI/CD to ECS with SHA Tag

# main 브랜치에 push가 발생할 때 워크플로우 실행
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # GitHub Actions가 실행될 환경 (Ubuntu 최신)

    permissions:
      contents: read  # GITHUB_TOKEN 권한 설정 (저장소 읽기)

    env:  # 전역 환경 변수 설정
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com  # ECR 레지스트리 URI
      ECR_REPOSITORY: dev/team6-monew  # ECR 리포지토리 이름
      IMAGE_TAG: ${{ github.sha }}  # Git 커밋 해시로 이미지 태그 생성

    steps:
      # 1. GitHub 저장소 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 17 설치 (Gradle 빌드를 위해 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradlew 실행 권한 부여
      - name: Grant permission to gradlew
        run: chmod +x ./gradlew

      # 4. 테스트 실행 + Jacoco 코드 커버리지 체크
      - name: Run tests and coverage check
        run: ./gradlew clean test jacocoTestReport jacocoTestCoverageVerification
     
      # 4.5. 커버리지 리포트를 Codecov에 업로드
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/reports/jacoco/test/jacocoTestReport.xml


      # 5. AWS 인증 설정 (IAM 사용자 키 기반)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub Secrets에서 가져온 액세스 키
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # 시크릿 키
          aws-region: ${{ secrets.AWS_REGION }}  # 사용 리전

      # 6. AWS ECR에 로그인
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 7. Docker 이미지 빌드 & ECR에 푸시
      - name: Build & Push Docker image
        run: |
          docker build --platform linux/amd64 --provenance=false -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 8. ECS Task Definition을 수정하여 최신 이미지 반영
      - name: Render ECS task definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/task-definition.json  # 사전 정의된 JSON 템플릿 경로
          container-name: team6-monew-container  # 이미지가 변경될 컨테이너 이름
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # 9. ECS 서비스에 새 Task Definition 적용 → 무중단 롤링 배포 수행
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs/task-definition.json  # 앞 단계에서 렌더링된 Task Definition
          cluster: monew-cluster  # 배포 대상 ECS 클러스터
          service: monew-service  # 배포 대상 ECS 서비스
          wait-for-service-stability: true  
